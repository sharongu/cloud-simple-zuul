spring:
  application:
    name: @project.name@
    
info.version: @project.version@
    
eureka:
  instance:
    leaseRenewalIntervalInSeconds: 10
    metadataMap:
      # 自定义的一个元数据，用来把这个service的hystrix信息归类到一个名为pipa的cluster里面，这样turbine监控页面上会将同一cluster的所有service的断路器数据一起显示
      turbineCluster: pipa
    
  client:
    healthcheck:
      enabled: true
    serviceUrl:
      defaultZone: http://peer1:8761/eureka/
      
# 使用http://ip/routes可以查看当前生效的所有路由
zuul:
  # 默认值是Cookie,Set-Cookie,Authorization，为了让zuul将sessionid传递给下游服务，因此将Cookie从敏感头里面去掉，每个route里面设置的sensitiveHeaders可以覆盖这个全局设置
  sensitiveHeaders: Set-Cookie
  # 不设置这个的话，会自动代理所有注册到eureka server的services，对于某个service拦截的url路径就类似 /serviceId/**
  ignoredServices: '*'
  routes:
    # 将/api/**转发到serviceId为user-service的服务，users是设置的别名，和serviceid没关系
    users:
      path: /api/**
      serviceId: user-service
      # 默认为true，当为true时，转发到最终service时将不包含前缀（即/app），否则会包含前缀
      stripPrefix: true
    # 上面的设置也可以简化成类似下面的样子，但是就无法设置该路由的其它属性了
    # user-service: /api/**
    # 多个路由的话可以依次设置，拦截顺序由yml配置文件中定义的顺序决定，但properties文件没法定义顺序，因此建议用yml文件
    # serviceId2: /path/**
    ui:
      path: /ui/**
      serviceId: simple-ui
      stripPrefix: false